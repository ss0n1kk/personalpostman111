document.addEventListener('DOMContentLoaded', function() {
    const logoutBtn = document.getElementById('logoutBtn');
    const ordersList = document.getElementById('ordersList');
    const partnersList = document.getElementById('partnersList');

    if (logoutBtn) {
        logoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('userRole');
            window.location.href = 'index.html';
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã
    loadOrders();
    loadPartnerApplications();

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    setInterval(loadOrders, 10000);
    setInterval(loadPartnerApplications, 10000);

    async function loadOrders() {
        try {
            const response = await fetch('php/get_orders.php');
            const data = await response.json();
            
            if (data.success) {
                displayOrders(data.orders);
            } else {
                ordersList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</p>';
            }
        } catch (error) {
            console.error('Error:', error);
            ordersList.innerHTML = '<p>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>';
        }
    }

    async function loadPartnerApplications() {
        try {
            const response = await fetch('php/get_partners.php');
            const data = await response.json();
            
            if (data.success) {
                displayPartnerApplications(data.partners);
            } else {
                partnersList.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫</p>';
            }
        } catch (error) {
            console.error('Error:', error);
            partnersList.innerHTML = '<p>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</p>';
        }
    }

    function displayOrders(orders) {
        if (!ordersList) return;

        if (orders.length === 0) {
            ordersList.innerHTML = '<p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
            return;
        }

        ordersList.innerHTML = orders.map(order => `
            <div class="order-item">
                <h4>–ó–∞–∫–∞–∑ #${order.id} <small>(${order.created_at})</small></h4>
                <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${order.phone}</p>
                <p><strong>üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</strong> ${order.customer_name}</p>
                <p><strong>üìç –û—Ç–∫—É–¥–∞:</strong> ${order.from_address}</p>
                <p><strong>üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> ${order.recipient_name}</p>
                <p><strong>üìç –ö—É–¥–∞:</strong> ${order.to_address}</p>
                <p><strong>‚öñÔ∏è –í–µ—Å:</strong> ${order.package_weight} –∫–≥</p>
                <p><strong>üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</strong> ${order.delivery_date}</p>
                <p><strong>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong> ${order.notes || '–Ω–µ—Ç'}</p>
                <p><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> 
                    <span class="order-status status-${order.status}">
                        ${getStatusText(order.status)}
                    </span>
                </p>
                <div style="margin-top: 1rem;">
                    <button onclick="updateOrderStatus(${order.id}, 'approved')" class="btn">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
                    <button onclick="updateOrderStatus(${order.id}, 'rejected')" class="btn btn-secondary">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                    <button onclick="updateOrderStatus(${order.id}, 'pending')" class="btn">‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–µ</button>
                </div>
            </div>
        `).join('');
    }

    function displayPartnerApplications(partners) {
        if (!partnersList) return;

        if (partners.length === 0) {
            partnersList.innerHTML = '<p>–ù–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫</p>';
            return;
        }

        partnersList.innerHTML = partners.map(partner => `
            <div class="order-item">
                <h4>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –∑–∞—è–≤–∫–∞ #${partner.id}</h4>
                <p><strong>üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> ${partner.organization}</p>
                <p><strong>üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</strong> ${partner.name}</p>
                <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${partner.phone}</p>
                <p><strong>üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${partner.message || '–Ω–µ—Ç'}</p>
                <p><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> 
                    <span class="order-status status-${partner.status}">
                        ${getStatusText(partner.status)}
                    </span>
                </p>
                <div style="margin-top: 1rem;">
                    <button onclick="updatePartnerStatus(${partner.id}, 'approved')" class="btn">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
                    <button onclick="updatePartnerStatus(${partner.id}, 'rejected')" class="btn btn-secondary">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                </div>
            </div>
        `).join('');
    }

    function getStatusText(status) {
        const statusMap = {
            'pending': '‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
            'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ', 
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        };
        return statusMap[status] || status;
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async function updateOrderStatus(orderId, status) {
    if (!confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –Ω–∞ "${status}"?`)) return;
    
    try {
        const response = await fetch('php/update_order.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({orderId, status})
        });
        
        const data = await response.json();
        if (data.success) {
            alert(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω!`);
            location.reload();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
}

async function updatePartnerStatus(partnerId, status) {
    if (!confirm(`–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${partnerId} –Ω–∞ "${status}"?`)) return;
    
    try {
        const response = await fetch('php/update_partner.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({partnerId, status})
        });
        
        const data = await response.json();
        if (data.success) {
            alert(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #${partnerId} –∏–∑–º–µ–Ω–µ–Ω!`);
            location.reload();
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    }
}